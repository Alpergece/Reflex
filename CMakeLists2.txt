cmake_minimum_required(VERSION 2.8.3)
project(cooperative_control)

add_compile_options(-std=c++11)
set(CMAKE_CXX_FLAGS "-std=c++11 ${CMAKE_CXX_FLAGS}")
## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages

find_package(catkin REQUIRED COMPONENTS
  trac_ik_lib
  sensor_msgs
  std_msgs
  geometry_msgs
  trajectory_msgs
  message_generation
  realtime_scheduler_interface
  kdl_parser
  eigen_conversions
  dynamic_reconfigure
  assisted_suturing_control
)

# Boost
find_package(Boost REQUIRED COMPONENTS date_time)
# KDL
# find_package(orocos_kdl REQUIRED)
# Eigen
find_package(Eigen3 REQUIRED NO_MODULE)
# Pinnochio
list(APPEND CMAKE_PREFIX_PATH "/opt/openrobots/")
find_package(pinocchio REQUIRED)
# Yaml
find_package(yaml-cpp REQUIRED)
# Casadi
list(APPEND CMAKE_PREFIX_PATH "/usr/local/")
find_package(CASADI REQUIRED)
# Reflexxes
set(EXTRALIB_BIN1 ${PROJECT_SOURCE_DIR}/lib/libReflexxesTypeII.a)

# RELEASE TYPE
set(CMAKE_BUILD_TYPE Debug)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
 add_service_files(
   FILES
   robot_command.srv
 )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
 generate_messages(
   DEPENDENCIES
   std_msgs  # Or other packages containing msgs
   geometry_msgs
 )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
generate_dynamic_reconfigure_options(
  config/DynVar.cfg
)

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS include
#  LIBRARIES denso_controller
  CATKIN_DEPENDS trac_ik_lib  
  DEPENDS
    Boost
    # Orocos_kdl
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  include
  include/Reflexxes
  ${catkin_INCLUDE_DIRS}
  ${Boost_INCLUDE_DIRS}
  # ${orocos_kdl_INCLUDE_DIRS}
  ${PINOCCHIO_INCLUDE_DIRS}
)

## Declare a C++ library
add_library(cooperative_control_lib  src/cooperative_control.cpp )

# target_link_libraries(denso_controller
# ${assisted_suturing_control_LIBRARIES}
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(denso_controller ${${PROJECT_NAME}_EXPORTED_TARGETS})

## Declare a C++ executable
# add_executable(cooperative_control src/cooperative_control.cpp src/b-Cap13.c)

 add_executable(cooperative_control_exec
     src/main.cpp
     # src/denso_vs050_control.cpp
     src/bcap/bCAPClient/bcap_client.c
     src/bcap/bcap_common.c
     src/bcap/dn_com.c
     src/bcap/dn_common.c
     src/bcap/dn_device.c
     src/bcap/dn_tcp.c
     src/bcap/dn_udp.c
     src/bcap/dn_thread.c
     src/bcap/dn_socket.c
     )

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(denso_vs050_control_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

# add_dependencies(denso_vs050_control_node assisted_suturing_control)

## Specify libraries to link a library or executable target against
 target_link_libraries(cooperative_control_exec
  cooperative_control_lib
  ${catkin_LIBRARIES}
  ${Boost_LIBRARIES}/
  # ${orocos_kdl_LIBRARIES}
  ${EXTRALIB_BIN1}
 )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS denso_vs050_control denso_vs050_control_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_denso_vs050_control.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
